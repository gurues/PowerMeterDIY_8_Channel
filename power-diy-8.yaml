esphome:
  name: powermeter-diy-8
  friendly_name: powermeter-diy-8

  libraries:
    - ZMPT101B-arduino=https://github.com/Abdurraziq/ZMPT101B-arduino.git

  includes: 
    - ZMPT101B.h
    - ZMPT101B.cpp

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "a definir por el usuario"     # a definir por el usuario

ota:
  - platform: esphome
    password: "TU_OTA_PASS"  # a definir por el usuario

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip: 
    static_ip: 192.168.1.XXX  # a definir por el usuario
    gateway: 192.168.1.1      # a definir por el usuario
    subnet: 255.255.255.0     # a definir por el usuario

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Powermeter-Diy-8"
    password: "TU_PASS_PORTAL_CAUTIVO"

captive_portal:

# Configuración I2C
i2c: 
  sda: GPIO8 
  scl: GPIO9

ads1115:
  - address: 0x48
    id: ads1115_48 # GND

  - address: 0x49 
    id: ads1115_49 # VCC 

  - address: 0x4A
    id: ads1115_4A # SDA

  - address: 0x4B
    id: ads1115_4B # SCL

globals:
  - id: initialized
    type: bool
    initial_value: 'false'

# Configuración sensores
sensor:
  ##################################  VOLTAJE  ###########################################
  - platform: adc
    pin: GPIO4
    name: "Voltaje Acometida"
    id: voltaje
    update_interval: 30s
    filters:  
    - skip_initial: 3
    - quantile: # envia datos cada 1 min aprox -> window_size:10, send_every:3, send_first_at:3, quantile:.9
        window_size: 10
        send_every: 3
        send_first_at:  3
        quantile: .9
    
    on_value: # se ejecuta una vez cumplido filters
        then:
          - lambda: |-
              
              //ESP_LOGD("custom", "Lambda");                    // Mensaje de depuración
              static ZMPT101B zmpt_sensor(4, 50.0);              // Declaración del sensor como estático para que persista su valor entre llamadas lambda
              if (!id(initialized)){                             // Calibracion sensor - se ejecuta 1 vez
                zmpt_sensor.setSensitivity(823.0f);              // Ajustar para obterner el valor correcto de Tensión Alterna
                id(initialized) = true;
                //ESP_LOGD("custom", "Calibrado sensor...");     // Mensaje de depuración
              }
              if (id(initialized)) {                             // Obtener el valor RMS del sensor y publicarlo
                float rms_voltage = zmpt_sensor.getRmsVoltage();
                id(voltaje).publish_state(rms_voltage);
              }
  ##################################  WIFI  ###########################################
  - platform: wifi_signal
    name: "PowerMeterDIY_8 WiFi Signal"
    update_interval: 5min
  ##################################  ADS1115  ########################################  
  - platform: ads1115
    name: "PowerMeterDIY_8_1_ADS1115 A0-A1"
    id: ads_canal1
    internal: true
    ads1115_id: ads1115_48
    multiplexer: 'A0_A1'
    gain: 2.048
    update_interval: 5s
  
  - platform: ads1115
    name: "PowerMeterDIY_8_1_ADS1115 A2-A3"
    id: ads_canal2
    internal: true
    ads1115_id: ads1115_48
    multiplexer: 'A2_A3'
    gain: 2.048
    update_interval: 5s

  - platform: ads1115
    name: "PowerMeterDIY_8_2_ADS1115 A0-A1"
    id: ads_canal3
    internal: true
    ads1115_id: ads1115_49
    multiplexer: 'A0_A1'
    gain: 2.048
    update_interval: 5s
  
  - platform: ads1115
    name: "PowerMeterDIY_8_2_ADS1115 A2-A3"
    id: ads_canal4
    internal: true
    ads1115_id: ads1115_49
    multiplexer: 'A2_A3'
    gain: 2.048
    update_interval: 5s
    
  - platform: ads1115
    name: "PowerMeterDIY_8_3_ADS1115 A0-A1"
    id: ads_canal5
    internal: true
    ads1115_id: ads1115_4A
    multiplexer: 'A0_A1'
    gain: 2.048
    update_interval: 5s
    
  - platform: ads1115
    name: "PowerMeterDIY_8_3_ADS1115 A2-A3"
    id: ads_canal6
    internal: true
    ads1115_id: ads1115_4A
    multiplexer: 'A2_A3'
    gain: 2.048
    update_interval: 5s

  - platform: ads1115
    name: "PowerMeterDIY_8_4_ADS1115 A0-A1"
    id: ads_canal7
    internal: true
    ads1115_id: ads1115_4B
    multiplexer: 'A0_A1'
    gain: 2.048
    update_interval: 5s
    
  - platform: ads1115
    name: "PowerMeterDIY_8_4_ADS1115 A2-A3"
    id: ads_canal8
    internal: true
    ads1115_id: ads1115_4B
    multiplexer: 'A2_A3'
    gain: 2.048
    update_interval: 5s
##################################  CT_CLAMP  ###########################################
  - platform: ct_clamp
    sensor: ads_canal1
    name: "Consumo_Canal_1"
    id: consumo_canal1
    update_interval: 10s
    filters:
      - calibrate_linear: # Relación pinza 1V/30A
          # Valor inical
          - 0.0 -> 0.0
          - 0.340 -> 10.0
          - 1.0 -> 30.0
      - min:
          window_size: 10
          send_every: 5
          send_first_at: 3

  - platform: ct_clamp
    sensor: ads_canal2
    name: "Consumo_Canal_2"
    id: consumo_canal2
    update_interval: 10s
    filters:
      - calibrate_linear: # Relación pinza 1V/30A
          # Valor inical
          - 0.0 -> 0.0
          - 0.320 -> 10.0
          - 1.0 -> 30.0
      - min:
          window_size: 10
          send_every: 5
          send_first_at: 3

  - platform: ct_clamp
    sensor: ads_canal3
    name: "Consumo_Canal_3"
    id: consumo_canal3
    update_interval: 10s
    filters:
      - calibrate_linear: # Relación pinza 1V/30A
        # Valor inical
          - 0.0 -> 0.0
          - 0.310 -> 10.0
          - 1.0 -> 30.0
      - min:
          window_size: 10
          send_every: 5
          send_first_at: 3

  - platform: ct_clamp
    sensor: ads_canal4
    name: "Consumo_Canal_4"
    id: consumo_canal4
    update_interval: 10s
    filters:
      - calibrate_linear: # Relación pinza 1V/30A
          # Valor inical
          - 0.0 -> 0.0
          - 0.340 -> 10.0
          - 1.0 -> 30.0
      - min:
          window_size: 10
          send_every: 5
          send_first_at: 3

  - platform: ct_clamp
    sensor: ads_canal5
    name: "Consumo_Canal_5"
    id: consumo_canal5
    update_interval: 10s
    filters:
      - calibrate_linear: # Relación pinza 1V/50A
          # Valor inical
          - 0.0 -> 0.0
          - 0.180 -> 8.3 
          - 1.0 -> 50.0 
      - min:
          window_size: 10
          send_every: 5
          send_first_at: 3

  - platform: ct_clamp
    sensor: ads_canal6
    name: "Consumo_Canal_6"
    id: consumo_canal6
    update_interval: 10s
    filters:
      - calibrate_linear: # Relación pinza 1V/30A
          # Valor inical
          - 0.0 -> 0.0
          - 0.340 -> 8.3
          - 1.0 -> 30.0
      - min:
          window_size: 10
          send_every: 5
          send_first_at: 3

  - platform: ct_clamp
    sensor: ads_canal7
    name: "Consumo_Canal_7"
    id: consumo_canal7
    update_interval: 10s
    filters:
      - calibrate_linear: # Relación pinza 1V/30A
          # Valor inical
          - 0.0 -> 0.0
          - 0.360 -> 8.3
          - 1.0 -> 30.0
      - min:
          window_size: 10
          send_every: 5
          send_first_at: 3

  - platform: ct_clamp
    sensor: ads_canal8
    name: "Consumo_Canal_8"
    id: consumo_canal8
    update_interval: 10s
    filters:
      - calibrate_linear: # Relación pinza 1V/30A
          # Valor inical
          - 0.0 -> 0.0
          - 0.325 -> 8.3
          - 1.0 -> 30.0
      - min:
          window_size: 10
          send_every: 5
          send_first_at: 3
  ##################################  POWER  ###########################################        
  - platform: template
    id: PowerMeter_DIY_8_Power_Canal_1
    name: "Potencia_Canal_1"
    lambda: return (id(consumo_canal1).state) * (id(voltaje).state);
    unit_of_measurement: 'W'
    update_interval: 15s
    filters:
      - lambda: |-
            float new_value = 0.0;
            float min_value = 15;
            if (x > min_value)
              new_value = x; 
            return new_value;

  - platform: template
    id: PowerMeter_DIY_8_Power_Canal_2
    name: "Potencia_Canal_2"
    lambda: return (id(consumo_canal2).state) * (id(voltaje).state);
    unit_of_measurement: 'W'
    update_interval: 15s
    filters:
      - lambda: |-
            float new_value = 0.0;
            float min_value = 15;
            if (x > min_value)
              new_value = x; 
            return new_value;

  - platform: template
    id: PowerMeter_DIY_8_Power_Canal_3
    name: "Potencia_Canal_3"
    lambda: return (id(consumo_canal3).state) * (id(voltaje).state);
    unit_of_measurement: 'W'
    update_interval: 15s
    filters:
      - lambda: |-
            float new_value = 0.0;
            float min_value = 15;
            if (x > min_value)
              new_value = x; 
            return new_value;

  - platform: template
    id: PowerMeter_DIY_8_Power_Canal_4
    name: "Potencia_Canal_4"
    lambda: return (id(consumo_canal4).state) * (id(voltaje).state);
    unit_of_measurement: 'W'
    update_interval: 15s
    filters:
      - lambda: |-
            float new_value = 0.0;
            float min_value = 15;
            if (x > min_value)
              new_value = x; 
            return new_value;

  - platform: template
    id: PowerMeter_DIY_8_Power_Canal_5
    name: "Potencia_Canal_5"
    lambda: return (id(consumo_canal5).state) * (id(voltaje).state);
    unit_of_measurement: 'W'
    update_interval: 15s
    filters:
      - lambda: |-
            float new_value = 0.0;
            float min_value = 15;
            if (x > min_value)
              new_value = x; 
            return new_value;

  - platform: template
    id: PowerMeter_DIY_8_Power_Canal_6
    name: "Potencia_Canal_6"
    lambda: return (id(consumo_canal6).state) * (id(voltaje).state);
    unit_of_measurement: 'W'
    update_interval: 15s
    filters:
      - lambda: |-
            float new_value = 0.0;
            float min_value = 15;
            if (x > min_value)
              new_value = x; 
            return new_value;

  - platform: template
    id: PowerMeter_DIY_8_Power_Canal_7
    name: "Potencia_Canal_7"
    lambda: return (id(consumo_canal7).state) * (id(voltaje).state);
    unit_of_measurement: 'W'
    update_interval: 15s
    filters:
      - lambda: |-
            float new_value = 0.0;
            float min_value = 15;
            if (x > min_value)
              new_value = x; 
            return new_value;

  - platform: template
    id: PowerMeter_DIY_8_Power_Canal_8
    name: "Potencia_Canal_8"
    lambda: return (id(consumo_canal8).state) * (id(voltaje).state);
    unit_of_measurement: 'W'
    update_interval: 15s
    filters:
      - lambda: |-
            float new_value = 0.0;
            float min_value = 15;
            if (x > min_value)
              new_value = x; 
            return new_value;